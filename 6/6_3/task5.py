"""
Еще одним объектом модуля tkinter является класс Button, который создает на экране кнопку.

Обычно к кнопке нужно привязать функцию,
и затем после каждого нажатия на кнопку будет срабатывать привязанная функция.
Давайте создадим аналог класса Button

Ваша задача — создать класс CustomButton, у которого есть:
    1)  метод __init__, принимающий один обязательный аргумент текст кнопки, его необходимо сохранить в атрибут text.
        И также в метод  может поступать произвольное количество именованных аргументов.
        Их необходимо сохранять в атрибуты экземпляра под тем же названием;

    2)  метод config, который принимает произвольное количество именованных атрибутов.
        Он должен создать атрибут с указанным именем или, если этот атрибут уже присутствовал в экземпляре,
        изменить его на новое значение;

    3)  метод click, который должен выполнить следующую строчку: self.command()
        Здесь command является не методом, а атрибутом, который вызывают.
        В момент выполнения этой строчки может произойти две неприятные ситуации
            - атрибут command может отсутствовать у экземпляра и тогда возникнет исключение AttributeError;
            - атрибут command может не поддерживать оператор вызова и тогда возникнет исключение TypeError.
        Эти ситуации вам необходимо обработать в блоке try-except.
        При первом варианте нужно вывести сообщение «Кнопка не настроена», при втором - «Кнопка сломалась»

Для решения задачи напишите только реализацию класса CustomButton
"""


class CustomButton:
    def __init__(self, text, **kwargs):
        self.text = text
        for key, value in kwargs.items():
            setattr(self, key, value)  # Сохраняем именованные аргументы как атрибуты экземпляра

    def config(self, **kwargs):
        for key, value in kwargs.items():
            setattr(self, key, value)

    def click(self):
        try:
            self.command()
        except AttributeError:
            print('Кнопка не настроена')
        except TypeError:
            print('Кнопка сломалась')


if __name__ == '__main__':
    def func():
        print('Оно живое')


    btn = CustomButton(text="Hello", bd=20, bg='#ffaaaa')

    print(btn.text)
    btn.click()  # Кнопка не настроена
    btn.config(command=func)
    btn.click()  # Оно живое
    print()


    def func2():
        print('Оно суперживое')


    btn2 = CustomButton(text="Hello2", bd=20, bg='#ffaaaa')
    btn2.click()  # Кнопка не настроена
    btn2.config(command=func2)
    btn2.click()  # Оно суперживое
    btn2.config(command='hello')
    btn2.click()  # Кнопка сломалась
    btn2.config(command=lambda: print(123))
    btn2.click()  # 123
    del btn2.command
    btn2.click()  # 123
